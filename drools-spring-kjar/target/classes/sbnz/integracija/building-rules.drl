package com.catoni;

import java.util.Collections;

import com.catoni.models.enums.MoveTypes;
import com.catoni.models.enums.ResourceTypes;
import com.catoni.models.*;

rule "Build House"
    salience 4
    no-loop
    when
        $is: InputState(
            resources.contains(ResourceTypes.WOOD) && resources.contains(ResourceTypes.CLAY)
            && resources.contains(ResourceTypes.SHEEP) && resources.contains(ResourceTypes.GRAIN)
            )
        $m: Move( moveList.contains(MoveTypes.POTENTIAL_BUILD_HOUSE) )
    then
        System.out.println("Building house!");
        $m.addMove(MoveTypes.BUILD_HOUSE);

        System.out.println("Removing resources from hand");
        List<ResourceTypes> availableResources = $is.getResources();
        availableResources.remove(ResourceTypes.WOOD);
        availableResources.remove(ResourceTypes.CLAY);
        availableResources.remove(ResourceTypes.GRAIN);
        availableResources.remove(ResourceTypes.SHEEP);
        System.out.println("Available resources after building house: " + availableResources);
        $is.setResources(availableResources);

        update($is);
        update($m);
        
end

rule "Build Hotel"
    salience 4
    no-loop
    when
        $is: InputState(Collections.frequency(resources, ResourceTypes.ROCK) == 3 && Collections.frequency(resources, ResourceTypes.GRAIN) == 2)

        Number($rocks: intValue) from accumulate(
            ResourceTypes($t: this, $t == ResourceTypes.ROCK) from $is.resources,
            count($t)
        )

        Number($grain: intValue) from accumulate(
            ResourceTypes($t: this, $t == ResourceTypes.GRAIN) from $is.resources,
            count($t)
        )

        eval($rocks >= 3 && $grain >= 2)

        $m: Move( moveList.contains(MoveTypes.POTENTIAL_BUILD_HOTEL) && !moveList.contains(MoveTypes.END_TURN) )

    then
        System.out.println("Building hotel!");
        $m.addMove(MoveTypes.BUILD_HOTEL);

        System.out.println("Removing resources from hand");
        List<ResourceTypes> availableResources = $is.getResources();
        $is.getResources().remove(ResourceTypes.ROCK);
        $is.getResources().remove(ResourceTypes.ROCK);
        $is.getResources().remove(ResourceTypes.ROCK);
        $is.getResources().remove(ResourceTypes.GRAIN);
        $is.getResources().remove(ResourceTypes.GRAIN);
        System.out.println("Available resources after building hotel: " + $is.getResources());

        update($is);
        update($m);
end

rule "Build Road"
    salience 1
    no-loop
    when
        $is: InputState(
                resources.contains(ResourceTypes.WOOD) && resources.contains(ResourceTypes.CLAY)
            )
        $m: Move( moveList.contains(MoveTypes.POTENTIAL_BUILD_ROAD) )

        $gs: GlobalState()
    then
        System.out.println("Building road");
        $m.addMove(MoveTypes.BUILD_ROAD);

        System.out.println("Removing resources from hand");
        List<ResourceTypes> availableResources = $is.getResources();
        availableResources.remove(ResourceTypes.WOOD);
        availableResources.remove(ResourceTypes.CLAY);
        System.out.println("Available resources after building road: " + availableResources);
        $is.setResources(availableResources);

        update($is);
        update($m);

        System.out.println("Global state: " + $gs);

end

rule "Buy Crazy if you have a lot rocks and grains"
    salience 1
    no-loop
    when

        $is: InputState(
            resources.contains(ResourceTypes.SHEEP) &&
            resources.contains(ResourceTypes.GRAIN) &&
            resources.contains(ResourceTypes.ROCK) &&
            playerStates.get("bot").getResourceChances().get(ResourceTypes.ROCK) > 0.07 &&
            playerStates.get("bot").getResourceChances().get(ResourceTypes.GRAIN) > 0.07
            )
        $m: Move()

    then
        System.out.println("Buying crazy!");
        $m.addMove(MoveTypes.BUY_CRAZY);

        System.out.println("Removing resources from hand");
        List<ResourceTypes> availableResources = $is.getResources();
        availableResources.remove(ResourceTypes.ROCK);
        availableResources.remove(ResourceTypes.GRAIN);
        availableResources.remove(ResourceTypes.SHEEP);
        System.out.println("Available resources after buying crazy: " + availableResources);
        $is.setResources(availableResources);

        update($is);
        update($m);
end
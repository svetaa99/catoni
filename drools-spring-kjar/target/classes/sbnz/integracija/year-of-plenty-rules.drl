package com.catoni;

import com.catoni.models.enums.*;
import com.catoni.models.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.HashMap;
import java.util.Map;


rule "Play YEAR_OF_PLENTY to build a house"
    lock-on-active true
    no-loop
    when
        $is: InputState(
            playerStates.get("bot").getCraziesList().contains(CrazyTypes.YEAR_OF_PLENTY) && (
            (resources.contains(ResourceTypes.WOOD) && resources.contains(ResourceTypes.CLAY)) ||
            (resources.contains(ResourceTypes.WOOD) && resources.contains(ResourceTypes.GRAIN)) ||
            (resources.contains(ResourceTypes.WOOD) && resources.contains(ResourceTypes.SHEEP)) ||
            (resources.contains(ResourceTypes.CLAY) && resources.contains(ResourceTypes.GRAIN)) ||
            (resources.contains(ResourceTypes.CLAY) && resources.contains(ResourceTypes.SHEEP)) ||
            (resources.contains(ResourceTypes.GRAIN) && resources.contains(ResourceTypes.SHEEP)))
        )
        $m: Move()

    then
        $m.setObjects($is.getResources());
        $m.addMove(MoveTypes.PLAY_YEAR_OF_PLENTY);
        update($m);
end

rule "Draw resources for a house after playing YEAR_OF_PLENTY"
    no-loop
    when
        $is: InputState()
        $m: Move( moveList.get(moveList.size() - 1) == MoveTypes.PLAY_YEAR_OF_PLENTY )

    then
        List<ResourceTypes> available = $m.getObjects();

        System.out.println("Resources before checking what card to draw: " + available);

        int drawedCards = 0;

        if (available.contains(ResourceTypes.WOOD) == false) {
            System.out.println("Drawing WOOD");
            $m.addMove(MoveTypes.DRAW_WOOD);
            available.add(ResourceTypes.WOOD);
            drawedCards++;
        }

        if (available.contains(ResourceTypes.CLAY) == false) {
            System.out.println("Drawing CLAY");
            $m.addMove(MoveTypes.DRAW_CLAY);
            available.add(ResourceTypes.CLAY);
            drawedCards++;
        }

        if (available.contains(ResourceTypes.GRAIN) == false) {
            System.out.println("Drawing GRAIN");
            $m.addMove(MoveTypes.DRAW_GRAIN);
            available.add(ResourceTypes.GRAIN);
            drawedCards++;
        }

        if (available.contains(ResourceTypes.SHEEP) == false) {
            System.out.println("Drawing SHEEP");
            $m.addMove(MoveTypes.DRAW_SHEEP);
            available.add(ResourceTypes.SHEEP);
            drawedCards++;
        }

        if (drawedCards == 1) {
            List<ResourceTypes> allTypes = new ArrayList<>();
            allTypes.add(ResourceTypes.WOOD);
            allTypes.add(ResourceTypes.CLAY);
            allTypes.add(ResourceTypes.GRAIN);
            allTypes.add(ResourceTypes.SHEEP);
            allTypes.add(ResourceTypes.ROCK);
            int randomNum = ThreadLocalRandom.current().nextInt(0, 5);
            ResourceTypes resource = allTypes.get(randomNum);
            available.add(resource);

            switch(resource) {
                case WOOD:
                    $m.addMove(MoveTypes.DRAW_WOOD);
                    break;
                case CLAY:
                    $m.addMove(MoveTypes.DRAW_CLAY);
                    break;
                case GRAIN:
                    $m.addMove(MoveTypes.DRAW_GRAIN);
                    break;
                case SHEEP:
                    $m.addMove(MoveTypes.DRAW_SHEEP);
                    break;
                case ROCK:
                    $m.addMove(MoveTypes.DRAW_ROCK);
                    break;
                default:
                    break;
            }
        }

        System.out.println("Available resources after playing crazy and drawing cards: " + available);
        State myPlayerState = $is.getPlayerStates().get("bot");
        List<CrazyTypes> newCraziesList = myPlayerState.getCraziesList();
        newCraziesList.remove(CrazyTypes.YEAR_OF_PLENTY);
        myPlayerState.setCraziesList(newCraziesList);
        Map<String, State> newState = $is.getPlayerStates();
        newState.put("bot", myPlayerState);
        System.out.println("Crazies list after playing YEAR_OF_PLENTY: " + $is.getPlayerStates().get("bot").getCraziesList());

        modify($is) {setResources(available), setPlayerStates(newState)};
        update($m);
end

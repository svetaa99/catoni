package com.catoni;

import com.catoni.models.enums.*;
import com.catoni.models.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.HashMap;
import java.util.Map;

rule "Play ROAD_BUILDING to build two roads"
    no-loop
    salience 6
    when
        $is: InputState(
          playerStates.get("bot").getCraziesList().contains(CrazyTypes.ROAD_BUILDING)
        )
        $gs: GlobalState(
          longestRoad.keySet().toArray()[0] < $is.getPlayerStates().get("bot").getNumberOfRoads() + 2
        )
        $m: Move()

    then
        int currentLongestRoad = (int) $gs.longestRoad.keySet().toArray()[0];
        System.out.println("Current longest road: " + currentLongestRoad);
        System.out.println("Current bot's roads: " + $is.getPlayerStates().get("bot").getNumberOfRoads());

        State myPlayerState = $is.getPlayerStates().get("bot");
        List<CrazyTypes> newCraziesList = myPlayerState.getCraziesList();
        newCraziesList.remove(CrazyTypes.MONOPOLY);
        myPlayerState.setCraziesList(newCraziesList);
        Map<String, State> newState = new HashMap<>();
        newState.put("bot", myPlayerState);
        
        modify($is) {setPlayerStates(newState)};
        $m.addMove(MoveTypes.PLAY_ROAD_BUILDING);
        $gs.longestRoad.remove(currentLongestRoad);
        $gs.longestRoad.put($is.getPlayerStates().get("bot").getNumberOfRoads() + 2, "bot");
        update($gs);
        System.out.println("New longest road: " + $gs.longestRoad);
        update($m);
end

rule "Play ROAD_BUILDING to build a house"
    no-loop
    salience 6
    when
        $is: InputState(
          playerStates.get("bot").getCraziesList().contains(CrazyTypes.ROAD_BUILDING) &&
          (resources.contains(ResourceTypes.WOOD) && resources.contains(ResourceTypes.CLAY) && resources.contains(ResourceTypes.GRAIN) && resources.contains(ResourceTypes.SHEEP))
        )
        $m: Move()

    then
        State myPlayerState = $is.getPlayerStates().get("bot");
        System.out.println("Before updating states: " + $is.getPlayerStates());
        List<CrazyTypes> newCraziesList = myPlayerState.getCraziesList();
        newCraziesList.remove(CrazyTypes.ROAD_BUILDING);
        myPlayerState.setCraziesList(newCraziesList);
        Map<String, State> newState = $is.getPlayerStates();
        newState.put("bot", myPlayerState);
        
        modify($is) {setPlayerStates(newState)};
        System.out.println("After updating states: " + $is.getPlayerStates());
        $m.addMove(MoveTypes.PLAY_ROAD_BUILDING);
        update($m);
end
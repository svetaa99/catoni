package com.catoni;

import com.catoni.models.enums.*;
import com.catoni.models.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.HashMap;
import java.util.Map;

rule "Available house position"
  lock-on-active true
  no-loop
  salience 100
  when
    $is: InputState()

    accumulate(
        Building($t: this) from $is.position.getAvailableBuildingSpotsForPlayer("bot"),
        $available: collectList($t)
    )

    eval($available.size() >= 1)

    Number($val: doubleValue) from accumulate(
        Building($t: this, status == Status.FREE) from $available,
        max($t.getSumOfChances())
    )

    $b: Building(status == Status.FREE && getSumOfChances() == $val) from $available

    $m: Move( !moveList.contains(MoveTypes.POTENTIAL_BUILD_HOUSE) && !moveList.contains(MoveTypes.WIN_GAME) )

  then
    $m.addMove(MoveTypes.POTENTIAL_BUILD_HOUSE);
    $m.addBuilding($b);
    update($m);

end

rule "Available hotel position"
  lock-on-active true
  no-loop
  salience 99
  when
    $is: InputState()

    accumulate(
      Building($t: this) from $is.position.getAvailableHotelSpotsForPlayer("bot"),
      $available: collectList($t)
    )

    eval($available.size() >= 1)

    Number($val: doubleValue) from accumulate(
        Building($t: this, type == BuildingTypes.HOUSE) from $available,
        max($t.getSumOfChances())
    )

    $b: Building(type == BuildingTypes.HOUSE && getSumOfChances() == $val) from $available

    $m: Move( !moveList.contains(MoveTypes.POTENTIAL_BUILD_HOTEL) && !moveList.contains(MoveTypes.WIN_GAME) )
  then
    $m.addMove(MoveTypes.POTENTIAL_BUILD_HOTEL);
    $m.addBuilding($b);
    update($m);

end

rule "Available road position"
  lock-on-active true
  no-loop
  salience 98
  when
    $is: InputState()

    accumulate(
      Road($t: this) from $is.position.getAvailableRoadSpotsForPlayer("bot"),
      $available: collectList($t)
    )

    eval($available.size() >= 1)

    $m: Move( !moveList.contains(MoveTypes.POTENTIAL_BUILD_ROAD) && !moveList.contains(MoveTypes.WIN_GAME) )
  then
    List<Building> possibleBuildings = new ArrayList<>();
    List<Double> possibleResourcesChances = new ArrayList<>();

    for (Object road : $available) {
      Road r = (Road) road;
      if (r.getStatus() == Status.FREE) {
        if (r.getBuilding1().getStatus() == Status.FREE) {
          possibleBuildings.add(r.getBuilding1());
          double score = r.getBuilding1().getSumOfChances();
          possibleResourcesChances.add(score);
        }
        
        if (r.getBuilding2().getStatus() == Status.FREE) {
          possibleBuildings.add(r.getBuilding2());
          double score = r.getBuilding2().getSumOfChances();
          possibleResourcesChances.add(score);
        }
      }
    }

    if (possibleBuildings.size() > 0) {
      Double maxChance = Collections.max(possibleResourcesChances);
      int indexOfMax = possibleResourcesChances.indexOf(maxChance);
      Building bestBuilding = possibleBuildings.get(indexOfMax);

      for (Object road : $available) {
        Road r = (Road) road;
        if (r.getBuilding1().equals(bestBuilding) || r.getBuilding2().equals(bestBuilding)) {
          $m.addRoad(r);
          break;
        }
      }
    } else {
      int randomNum = ThreadLocalRandom.current().nextInt(0, $available.size() - 1);
      $m.addRoad((Road) $available.get(randomNum));
    }

    $m.addMove(MoveTypes.POTENTIAL_BUILD_ROAD);
    update($m);
end
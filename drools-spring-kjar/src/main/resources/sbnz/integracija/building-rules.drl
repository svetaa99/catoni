package com.catoni;

import java.util.Collections;

import com.catoni.models.enums.MoveTypes;
import com.catoni.models.enums.ResourceTypes;
import com.catoni.models.*;

rule "Build House"
    salience 5
    no-loop
    when
        $is: InputState(
            resources.contains(ResourceTypes.WOOD) && resources.contains(ResourceTypes.CLAY)
            && resources.contains(ResourceTypes.SHEEP) && resources.contains(ResourceTypes.GRAIN)
            )
        $m: Move( moveList.contains(MoveTypes.POTENTIAL_BUILD_HOUSE))

        accumulate(
            Building($t: this, status == Status.FREE) from $m.buildings,
            $availableBuildings: collectList($t)
        )

    then
        if ($availableBuildings.size() > 0) {
            double maxChance = -1;
            Building buildingToBuild = null;
            for (Object b : $availableBuildings) {
                Building building = (Building) b;
                if (building.getSumOfChances() > maxChance) {
                    maxChance = building.getSumOfChances();
                    buildingToBuild = building;
                }
            }

            if (buildingToBuild != null) {
                BuildingDto dto = new BuildingDto();
                dto.setRow(buildingToBuild.getRow());
                dto.setCol(buildingToBuild.getColumn());
                dto.setPlayerName("bot");
                dto.setType(BuildingTypes.HOUSE);
                $is.getPosition().addBuilding(dto);
                int numberOfHouses = $is.getPlayerStates().get("bot").getNumberOfHouses();
                $is.getPlayerStates().get("bot").setNumberOfHouses(numberOfHouses + 1);
                System.out.println("Building house on position: row1: " + dto.getRow() + " col: " + dto.getCol());
            }
        }

        $m.addMove(MoveTypes.BUILD_HOUSE);

        System.out.println("Removing resources from hand");
        List<ResourceTypes> availableResources = $is.getResources();
        availableResources.remove(ResourceTypes.WOOD);
        availableResources.remove(ResourceTypes.CLAY);
        availableResources.remove(ResourceTypes.GRAIN);
        availableResources.remove(ResourceTypes.SHEEP);
        $is.setResources(availableResources);
        $is.getPlayerStates().get("bot").setResources(availableResources);

        update($is);
        update($m);
end

rule "Build Hotel"
    salience 4
    no-loop
    when
        $is: InputState()

        Number($rocks: intValue) from accumulate(
            ResourceTypes($t: this, $t == ResourceTypes.ROCK) from $is.resources,
            count($t)
        )

        Number($grain: intValue) from accumulate(
            ResourceTypes($t: this, $t == ResourceTypes.GRAIN) from $is.resources,
            count($t)
        )

        eval($rocks >= 3 && $grain >= 2)

        $m: Move( moveList.contains(MoveTypes.POTENTIAL_BUILD_HOTEL) && !moveList.contains(MoveTypes.END_TURN) )

        accumulate(
            Building($t: this, status == Status.TAKEN && type == BuildingTypes.HOUSE) from $m.buildings,
            $availableBuildings: collectList($t)
        )

    then

        if ($availableBuildings.size() > 0) {
            double maxChance = -1;
            Building buildingToBuild = null;
            for (Object b : $availableBuildings) {
                Building building = (Building) b;
                if (building.getSumOfChances() > maxChance) {
                    maxChance = building.getSumOfChances();
                    buildingToBuild = building;
                }
            }

            if (buildingToBuild != null) {
                BuildingDto dto = new BuildingDto();
                dto.setRow(buildingToBuild.getRow());
                dto.setCol(buildingToBuild.getColumn());
                dto.setPlayerName("bot");
                dto.setType(BuildingTypes.HOTEL);
                $is.getPosition().addBuilding(dto);
                int numberOfHouses = $is.getPlayerStates().get("bot").getNumberOfHouses();
                $is.getPlayerStates().get("bot").setNumberOfHouses(numberOfHouses - 1);
                int numberOfHotels = $is.getPlayerStates().get("bot").getNumberOfHotels();
                $is.getPlayerStates().get("bot").setNumberOfHotels(numberOfHotels + 1);
                System.out.println("Building hotel on position: row1: " + dto.getRow() + " col: " + dto.getCol());
            }
        }

        $m.addMove(MoveTypes.BUILD_HOTEL);

        System.out.println("Removing resources from hand");
        List<ResourceTypes> availableResources = $is.getResources();
        availableResources.remove(ResourceTypes.ROCK);
        availableResources.remove(ResourceTypes.ROCK);
        availableResources.remove(ResourceTypes.ROCK);
        availableResources.remove(ResourceTypes.GRAIN);
        availableResources.remove(ResourceTypes.GRAIN);
        $is.setResources(availableResources);
        $is.getPlayerStates().get("bot").setResources(availableResources);

        update($is);
        update($m);
end

rule "Build Road"
    salience 2
    no-loop
    when
        $is: InputState(
                resources.contains(ResourceTypes.WOOD) && resources.contains(ResourceTypes.CLAY)
            )
        $m: Move( moveList.contains(MoveTypes.POTENTIAL_BUILD_ROAD) && roads.get(0).getStatus() == Status.FREE)

    then
        RoadDto roadDto = new RoadDto();
        roadDto.setRow1($m.roads.get(0).getRow1());
        roadDto.setCol1($m.roads.get(0).getCol1());
        roadDto.setRow2($m.roads.get(0).getRow2());
        roadDto.setCol2($m.roads.get(0).getCol2());
        roadDto.setPlayer("bot");
        
        System.out.println("Building road on position: row1: " + roadDto.getRow1() + " col1: " + roadDto.getCol1() + " row2: " + roadDto.getRow2() + " col2: " + roadDto.getCol2());
        $m.addMove(MoveTypes.BUILD_ROAD);

        System.out.println("Removing resources from hand");
        List<ResourceTypes> availableResources = $is.getResources();
        availableResources.remove(ResourceTypes.WOOD);
        availableResources.remove(ResourceTypes.CLAY);
        $is.setResources(availableResources);
        $is.getPlayerStates().get("bot").setResources(availableResources);
        $is.getPosition().addRoad(roadDto);

        update($is);
        update($m);
end

rule "Buy Crazy if you have a lot rocks and grains"
    lock-on-active true
    salience 1
    when

        $is: InputState(
            resources.contains(ResourceTypes.SHEEP) &&
            resources.contains(ResourceTypes.GRAIN) &&
            resources.contains(ResourceTypes.ROCK) &&
            ((playerStates.get("bot").getResourceChances().get(ResourceTypes.ROCK) > 0.07 &&
                playerStates.get("bot").getResourceChances().get(ResourceTypes.GRAIN) > 0.07) ||
                resources.size() > 7
            )
            )
        $m: Move()

    then
        System.out.println("Buying crazy!");
        $m.addMove(MoveTypes.BUY_CRAZY);

        System.out.println("Removing resources from hand");
        List<ResourceTypes> availableResources = $is.getResources();
        availableResources.remove(ResourceTypes.ROCK);
        availableResources.remove(ResourceTypes.GRAIN);
        availableResources.remove(ResourceTypes.SHEEP);
        System.out.println("Available resources after buying crazy: " + availableResources);
        //ADD ONE RANDOM CRAZY TO CRAZIES LIST OF BOT
        List<CrazyTypes> old = $is.getPlayerStates().get("bot").getCraziesList();

        List<CrazyTypes> allCrazies = new ArrayList<>();
        allCrazies.add(CrazyTypes.KNIGHT);
        allCrazies.add(CrazyTypes.KNIGHT);
        allCrazies.add(CrazyTypes.KNIGHT);
        allCrazies.add(CrazyTypes.KNIGHT);
        allCrazies.add(CrazyTypes.YEAR_OF_PLENTY);
        allCrazies.add(CrazyTypes.MONOPOLY);
        allCrazies.add(CrazyTypes.ROAD_BUILDING);
        allCrazies.add(CrazyTypes.VICTORY_POINT);
        allCrazies.add(CrazyTypes.VICTORY_POINT);
        int randomNum = ThreadLocalRandom.current().nextInt(0, 8);
        old.add(allCrazies.get(randomNum));

        $is.setResources(availableResources);
        $is.getPlayerStates().get("bot").setCraziesList(old);

        update($is);
        update($m);
end